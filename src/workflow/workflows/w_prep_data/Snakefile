## Import packages
import pandas as pd

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
##localrules: copy_config, make_sample_list, select_sample, rename_rois, merge_data, rename_rois_subsampled, merge_data_subsampled, concat_studies, select_covars, select_roi_vars, correct_icv

### Report data
#report: "report/workflow.rst"

###################################
## Default config file 
## Runs the workflow with the test dataset
## Edit this for running it on other datasets
in_config = "../../config/vTest/config_prep_data.yaml"
configfile: f"{in_config}"
###################################

###################################
## Read config vars and lists

dir_input = config["dir_input"]
dir_output = config["dir_output"]
rois = config["list_ROIs"]
covars = config["list_covars"]
corr_type = config["corr_type"]

df = pd.read_csv("../../" + config["list_studies_merge"])
LIST_STUDIES = df.Study.tolist()


###################################
## Set output file names

OUT_CONFIG = f"../../../../{dir_output}/config/config_prep_data.yaml"

OUT_RESULTS = expand(f"../../../../{dir_output}/out_data_na_removed/combined_{{rtype}}_{{dtype}}.csv", rtype = config["roi_types"], dtype = ['covars', 'raw', corr_type])

OUT_FILES = [OUT_CONFIG] + OUT_RESULTS

print("Target out files:" + '\n' + '\n'.join(OUT_FILES) + '\n')
#input()

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        f"{in_config}"
    output:
        f"{OUT_CONFIG}"
    shell:
        "cp -v {input} {output}"
    
rule rename_rois:
    '''
    Rename MUSE roi indices to roi codes
    '''
    input:
        roi=f"../../../../{dir_input}/Studies/{{study}}/{{study}}_{{dtype}}.csv",
        dict=f"../../{rois}"
    output:
        temp(f"../../../../{dir_output}/renamed/{{study}}_{{dtype}}.csv")
    params:
        var_from = 'Index',
        var_to = 'Code'
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_rename_columns_using_dict.py {input} {params} {output}"

rule merge_data:
    '''
    Merge demog data to ROIs
    '''
    input:
        demog=f"../../../../{dir_input}/Studies/{{study}}/{{study}}_DemogClin.csv",
        roi=f"../../../../{dir_output}/renamed/{{study}}_{{dtype}}.csv"
    params:
        key_var = 'MRID'
    output:
        temp(f"../../../../{dir_output}/merged/{{study}}_{{dtype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule concat_studies:
    '''
    Combine studies into a single csv
    '''
    input:
        expand("../../../../{dir_output}/merged/{study}_{{dtype}}.csv", dir_output = dir_output, study=LIST_STUDIES)
    params:
        key_var = 'MRID'
    output:
        temp(f"../../../../{dir_output}/combined/combined_{{dtype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_concat_dfs.py {output} {input}"

rule qc_ROIs:
    '''
    Discard QC fail cases based on distributions
    '''
    input:
        f"../../../../{dir_output}/combined/combined_{{dtype}}.csv"
    output:
        temp(f"../../../../{dir_output}/qced/combined_{{dtype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_qc_ROIs.py {input} {output}"

rule select_covars:
    '''
    Select variables from data
    '''
    input:
        in_csv=f"../../../../{dir_output}/qced/combined_{{dtype}}.csv",
        dict_csv=f"../../{covars}"
    params:
        dict_var = 'Name',
        vars_list = 'MRID',
    output:
        temp(f"../../../../{dir_output}/out_data/combined_{{dtype}}_covars.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_vars.py {input} {params} {output}"

rule select_roi_vars:
    '''
    Select variables from data
    '''
    input:
        in_csv=f"../../../../{dir_output}/qced/combined_{{dtype}}.csv",
        dict=f"../../{rois}"
    params:
        dict_var = 'Code',
        vars_list = 'MRID',
    output:
        temp(f"../../../../{dir_output}/out_data/combined_{{dtype}}_raw.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_vars.py {input} {params} {output}"

rule correct_icv:
    '''
    Normalize ROIs. Values are scaled either by a constant factor (NormICV) or 100 (PercICV)
    '''
    input:
        f"../../../../{dir_output}/out_data/combined_{{dtype}}_raw.csv"
    params:
        icv_var = 'MUSE_702',
        exclude_vars = 'MRID',
    output:
        temp(f"../../../../{dir_output}/out_data/combined_{{dtype}}_{corr_type}.csv")
    resources:
        mem_mb=8000
    shell:
        f"python ../../utils/generic/util_corr_icv.py {{input}} {corr_type} {{params}} {{output}}"

rule drop_na:
    '''
    Drop NAs in final data
    '''
    input:
        f"../../../../{dir_output}/out_data/combined_{{dtype}}.csv"
    output:
        f"../../../../{dir_output}/out_data_na_removed/combined_{{dtype}}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_drop_na.py {input} {output}"
