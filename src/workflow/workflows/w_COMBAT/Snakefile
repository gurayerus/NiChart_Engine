## Import packages
import pandas as pd
import os
import sys

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
localrules: copy_config, merge_data, select_vars, select_COMBAT_sample_train, select_COMBAT_sample_test, remove_COMBAT_suffix, calc_derived_ROIs 

## Report data
report: "report/workflow.rst"

###################################
## Default config file 
## Runs the workflow with the test dataset
## Edit this for running it on other datasets
in_config = "../../config/vTest/config_COMBAT.yaml"
configfile: f"{in_config}"
###################################

###################################
## Read config vars and lists

dir_input = config["dir_input"]
dir_output = config["dir_output"]
rois = config["list_ROIs"]
derived_rois = config["list_derived_ROIs"]
sample_train = config["sample_COMBAT_train"]
sample_test = config["sample_COMBAT_test"]

###################################
## Set out file names

OUT_CONFIG = f"../../{dir_output}/config/config_COMBAT.yaml"

OUT_RESULTS = expand("../../{dir_output}/out_data/combined_{dtype}_{ctype}_COMBAT.csv", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = dir_output)

OUT_MODELS = expand("../../{dir_output}/out_models/combined_{dtype}_{ctype}_COMBATModel.pkl.gz", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = dir_output)

OUT_FILES = [OUT_CONFIG] + OUT_RESULTS + OUT_MODELS

print("Target out files:" + '\n' + '\n'.join(OUT_FILES))

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        f"{in_config}"
    output:
        f"{OUT_CONFIG}"
    shell:
        "cp -v {input} {output}"

rule merge_data:
    '''
    Merge demog data to ROIs
    '''
    input:
        demog=f"../../{dir_input}/combined_{{dtype}}_{{ctype}}.csv",
        roi=f"../../{dir_input}/combined_{{dtype}}_covars.csv",
    params:
        key_var = 'MRID'
    output:
        f"../../{dir_output}/merged/combined_{{dtype}}_{{ctype}}.csv"
        #temp(f"../../{dir_output}/merged/combined_{{dtype}}_{{ctype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars:
    '''
    Select variables from data
    '''
    input:
        in_csv=f"../../{dir_output}/merged/combined_{{dtype}}.csv",
        dict_csv=f"../../config/{rois}"
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,SITE,DLICV',
    output:
        f"../../{dir_output}/sel_vars/combined_{{dtype}}.csv"
        #temp(f"../../{dir_output}/sel_vars/combined_{{dtype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_vars.py {input} {params} {output}"

rule select_COMBAT_sample_train:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv=f"../../config/{sample_train}",
        data_csv=f"../../{dir_output}/sel_vars/combined_{{dtype}}.csv"
    params:
        key_var = 'MRID'
    output:
        f"../../{dir_output}/sel_sample/combined_{{dtype}}_train.csv"
        #temp(f"../../{dir_output}/sel_sample/combined_{{dtype}}_train.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_COMBAT_sample_test:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv=f"../../config/{sample_test}",
        data_csv=f"../../{dir_output}/sel_vars/combined_{{dtype}}.csv",
    params:
        key_var = 'MRID'
    output:
        f"../../{dir_output}/sel_sample/combined_{{dtype}}_test.csv"
        #temp(f"../../{dir_output}/sel_sample/combined_{{dtype}}_test.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule filter_age_COMBAT_sample_test:
    '''
    Select sample (using list)
    '''
    input:
        f"../../{dir_output}/sel_sample/combined_{{dtype}}_test.csv"
    params:
        var_name = 'Age',
        min_val = '20',
        max_val = '97'
    output:
        f"../../{dir_output}/sel_sample/combined_{{dtype}}_test_filtered.csv"
        #temp(f"../../{dir_output}/sel_sample/combined_{{dtype}}_test_filtered.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_filter_var_minmax.py {input} {params} {output}"

rule COMBAT_train:
    '''
    Train COMBAT model
    '''    
    input:
        f"../../{dir_output}/sel_sample/combined_{{dtype}}_train.csv"
    params:
        batch='SITE',
        vkey='MRID',
        vnum='DLICV',
        vcat='Sex',
        vspline='Age'
    output:
        mdl=f"../../{dir_output}/out_models/combined_{{dtype}}_COMBATModel.pkl.gz",
        csv=temp(f"../../{dir_output}/out_models/combined_{{dtype}}_train_COMBATOut.csv")
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/combat/util_combat_train.sh {input} {params} {output}"

rule COMBAT_apply:
    '''
    Apply COMBAT model to calculate harmonized values
    '''    
    input:
        data=f"../../{dir_output}/sel_sample/combined_{{dtype}}_test_filtered.csv",
        mdl=f"../../{dir_output}/out_models/combined_{{dtype}}_COMBATModel.pkl.gz"
    output:
        f"../../{dir_output}/harmonized/combined_{{dtype}}_COMBAT.csv"
        #temp(f"../../{dir_output}/harmonized/combined_{{dtype}}_COMBAT_init.csv")
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/combat/util_combat_apply.sh {input} {output}"

        
rule calc_derived_ROIs:
    '''
    Calculate derived ROIs from harmonized data
    - If the input data already includes derived ROIs, they will not be updated
    '''        
    input:
        in_csv=f"../../{dir_output}/harmonized/combined_{{dtype}}_COMBAT.csv",
        dict=f"../../config/{derived_rois}"
    params:
        key_var='MRID',
        roi_prefix='MUSE_'
    output:
        csv=f"../../{dir_output}/out_data/combined_{{dtype}}_COMBAT.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/muse/util_combine_MUSE_rois.py {input} {params} {output}"
