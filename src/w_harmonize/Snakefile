## Import packages
import pandas as pd
import os
import sys

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
#localrules: copy_config, merge_data, select_vars, select_COMBAT_sample_train, select_COMBAT_sample_test, remove_COMBAT_suffix, calc_derived_ROIs 

# Default config file 
configfile: "./config.yaml"

# Read config vars and lists
in_roi = config["in_roi"]
in_demog = config["in_demog"]
dset_name = config["dset_name"]
out_dir = config["out_dir"]
out_mdl = config["out_mdl"]
out_roi = config["out_roi"]
res_dir = config["res_dir"]
rois = f'{res_dir}/{config["list_ROIs"]}'
derived_rois = f'{res_dir}/{config["list_derived_ROIs"]}'
sample_train = f'{res_dir}/{config["sample_COMBAT_train"]}'
sample_test = f'{res_dir}/{config["sample_COMBAT_test"]}'

# Set output file names
out_files = [out_mdl, out_roi]
print("Target out files:" + '\n' + '\n'.join(out_files))

# Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: out_files

rule merge_data:
    '''
    Merge demog data to ROIs
    '''
    input:
        demog=in_demog,
        roi=in_roi,
    params:
        key_var = 'MRID'
    output:
        f"{out_dir}/tmp_harmonize/{dset_name}_merged.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars:
    '''
    Select variables from data
    '''
    input:
        in_csv = f"{out_dir}/tmp_harmonize/{dset_name}_merged.csv",
        dict_csv = rois
    params:
        key_col = 'MRID',
        cols_keep = 'MRID,Age,Sex,SITE,DLICV',
        dict_col = 'Code',
    output:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_cols_using_dict.py {input.in_csv} {params.key_col} {params.cols_keep} {input.dict_csv} {params.dict_col} {output}"

rule select_COMBAT_sample_train:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv=sample_train,
        data_csv=f"{out_dir}/tmp_harmonize/{dset_name}_selvars.csv"
    params:
        key_var = 'MRID'
    output:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars_train.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_COMBAT_sample_test:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv=sample_test,
        data_csv=f"{out_dir}/tmp_harmonize/{dset_name}_selvars.csv"
    params:
        key_var = 'MRID'
    output:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars_test.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule filter_age_COMBAT_sample_test:
    '''
    Select sample (using list)
    '''
    input:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars_test.csv"
    params:
        var_name = 'Age',
        min_val = '20',
        max_val = '97'
    output:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars_test_filtered.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_filter_var_minmax.py {input} {params} {output}"

rule COMBAT_train:
    '''
    Train COMBAT model
    '''    
    input:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars_train.csv"
    params:
        batch='SITE',
        vkey='MRID',
        vnum='DLICV',
        vcat='Sex',
        vspline='Age',
    output:
        mdl=out_mdl,
        csv=f"{out_dir}/{dset_name}_train_harmonized.csv",
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/combat/util_combat_train.sh {input} {params} {output}"

rule COMBAT_apply:
    '''
    Apply COMBAT model to calculate harmonized values
    '''    
    input:
        data=f"{out_dir}/tmp_harmonize/{dset_name}_selvars_test_filtered.csv",
        mdl=out_mdl,
    output:
        f"{out_dir}/tmp_harmonize/{dset_name}_selvars_test_filtered_harmonized.csv"
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/combat/util_combat_apply.sh {input} {output}"

        
rule calc_derived_ROIs:
    '''
    Calculate derived ROIs from harmonized data
    - If the input data already includes derived ROIs, they will not be updated
    '''        
    input:
        in_csv=f"{out_dir}/tmp_harmonize/{dset_name}_selvars_test_filtered_harmonized.csv",
        dict=derived_rois
    params:
        key_var='MRID',
        roi_prefix='MUSE_'
    output:
        out_roi
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/muse/util_combine_MUSE_rois.py {input} {params} {output}"
