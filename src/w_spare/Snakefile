## Import packages
import pandas as pd
import os
import sys

# Default config file
configfile: "./config.yaml"

# Read config vars and lists
in_roi = config["in_roi"]
in_demog = config["in_demog"]
dset_name = config["dset_name"]
out_dir = config["out_dir"]
out_csv = config["out_csv"]
res_dir = config["res_dir"]
rois = f'{res_dir}/{config["list_ROIs"]}'
derived_rois = f'{res_dir}/{config["list_derived_ROIs"]}'

# Set output file names
out_files = [out_csv]
print("Target out files:" + '\n' + '\n'.join(out_files))

# Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: out_files

rule merge_data:
    '''
    Merge demog data to ROIs
    '''
    input:
        demog = in_demog,
        roi = in_roi
    params:
        key_var = 'MRID'
    output:
        f"{out_dir}/tmp_spare/sel_vars/{dset_name}_withcovars.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars:
    '''
    Select vars
    '''
    input:
        in_csv = f"{out_dir}/tmp_spare/sel_vars/{dset_name}_withcovars.csv",
        dict_csv = rois
    params:
        key_col = 'MRID',
        cols_keep = 'MRID,Age,Sex,DLICV',
        dict_col = 'Code',
    output:
        f"{out_dir}/tmp_spare/sel_vars/{dset_name}_selvars.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_cols_using_dict.py {input.in_csv} {params.key_col} {params.cols_keep} {input.dict_csv} {params.dict_col} {output}"

def get_spare_sample(wildcards):
    path_spare = config["sample_SPARE_" + wildcards.stype]
    path_spare = f'{res_dir}/{path_spare}'
    return path_spare

rule select_SPARE_sample:
    '''
    Select sample (using list)
    '''
    input:
        sample=get_spare_sample,
        data=f"{out_dir}/tmp_spare/sel_vars/{dset_name}_selvars.csv"
    params:
        key_var = 'MRID'
    output:
        f"{out_dir}/tmp_spare/sel_sample/{dset_name}_sample_{{stype}}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule rename_target_var:
    '''
    Rename the name of the second var to target
    '''
    input:
        f"{out_dir}/tmp_spare/sel_sample/{dset_name}_sample_{{stype}}.csv"
    params:
        num_col = '1',
        name_col = 'Target'
    output:
        f"{out_dir}/tmp_spare/sel_sample/{dset_name}_sample_{{stype}}_renamed.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_rename_column.py {input} {params} {output}"

rule split_train_test:
    '''
    Split spare sample all to train test
    '''
    input:
        f"{out_dir}/tmp_spare/sel_sample/{dset_name}_sample_{{stype}}_renamed.csv"
    params:
        strat_vars = 'Sex,Target',
        test_ratio = '0.4'
    output:
        f"{out_dir}/tmp_spare/train_test/{dset_name}_sample_{{stype}}_train.csv",
        f"{out_dir}/tmp_spare/train_test/{dset_name}_sample_{{stype}}_test.csv",
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_split_train_test.py {input} {params} {output}"

rule sparesvm_train:
    '''
    Train SPARE model
    '''
    input:
        f"{out_dir}/tmp_spare/train_test/{dset_name}_sample_{{stype}}_train.csv",
    params:
        vkey='MRID',
        target = 'Target'
    output:
        f"{out_dir}/tmp_spare/out_models/{dset_name}_SPARE-{{stype}}_Model.pkl.gz"
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/spare/util_spare_train.sh {input} {params} {output}"
        
rule sparesvm_test:
    '''
    Test SPARE model using the split test sample
    '''
    input:
        data=f"{out_dir}/tmp_spare/train_test/{dset_name}_sample_{{stype}}_test.csv",
        model=f"{out_dir}/tmp_spare/out_models/{dset_name}_SPARE-{{stype}}_Model.pkl.gz"
    output:
        f"{out_dir}/tmp_spare/pred_test/{dset_name}_test_SPARE-{{stype}}.csv",
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/spare/util_spare_test.sh {input} {wildcards.stype} {output}"

rule eval_SPARE_scores:
    '''
    Evaluate accuracy on test sample
    '''
    input:
        incsv=f"{out_dir}/tmp_spare/train_test/{dset_name}_sample_{{stype}}_test.csv",
        pred=f"{out_dir}/tmp_spare/pred_test/{dset_name}_test_SPARE-{{stype}}.csv",
    output:
        f"{out_dir}/tmp_spare/pred_eval/{dset_name}_test_SPARE-{{stype}}_eval.csv",
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/spare/util_eval_spare.py {input} Target {output}"

rule sparesvm_test_all:
    '''
    Test SPARE model using the complete data
    '''
    input:
        data=f"{out_dir}/tmp_spare/sel_vars/{dset_name}_selvars.csv",
        model=f"{out_dir}/tmp_spare/out_models/{dset_name}_SPARE-{{stype}}_Model.pkl.gz"
    output:
        f"{out_dir}/tmp_spare/out_data/{dset_name}_SPARE-{{stype}}.csv",
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/spare/util_spare_test.sh {input} {wildcards.stype} {output}"
      
rule sparesvm_merge_all:
    '''
    Merge SPARE scores
    '''
    input:
        data=expand(f"{out_dir}/tmp_spare/out_data/{dset_name}_SPARE-{{stype}}.csv", stype = config["spare_types"])
    output:
        out_csv
    resources:
        mem_mb=16000
    shell:
        "python ../../utils/generic/util_merge_dfs_multi.py {output} MRID {input}"
        

