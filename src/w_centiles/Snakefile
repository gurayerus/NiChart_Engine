## Import packages
import pandas as pd

# Default config file
configfile: "./config.yaml"

# Read config vars and lists
in_dir = config["in_dir"]
in_demog = config["in_demog"]
dset_name = config["dset_name"]
out_dir = config["out_dir"]
res_dir = config["res_dir"]
centile_vals = config["centile_vals"]
bin_size = config["bin_size"]
centile_types = config["centile_types"]
list_rois = config["list_rois"]
rois = f'{res_dir}/{config["list_rois"]}'

# Set output file names
out_files = expand(f"{out_dir}/centiles_renamed/{dset_name}_DLMUSE_raw_harmonized_centiles{{ctype}}.csv", ctype = centile_types)
out_files = expand(f"{out_dir}/centiles_renamed/{dset_name}_DLMUSE_raw_harmonized_normICV_centiles{{ctype}}.csv", ctype = centile_types)
print("Target out files:" + '\n' + '\n'.join(out_files))

# Read list of rois
df_roi = pd.read_csv(res_dir + '/' + list_rois)
roi_types = df_roi.Code.tolist()
roi_types[0] = 'DLICV'          # MUSE_702 is renamed as DLICV in processed data

# Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: out_files

rule select_rois:
    '''
    Select variables from data
    '''
    input:
        in_csv = in_demog
    params:
        key_col = 'MRID',
        cols_keep = 'MRID,Age,DLICV',
    output:
        f"{out_dir}/tmp_centiles/sel_vars/{dset_name}_demog.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_cols.py {input} {params} {output}"

def get_centiles_sample(wildcards):
    path_centiles = res_dir + '/' + config["sample_centiles_" + wildcards.ctype]
    return path_centiles

rule prepare_sample:
    '''
    Merge demog data to ROIs
    '''
    input:
        sample = get_centiles_sample,
        demog = f"{out_dir}/tmp_centiles/sel_vars/{dset_name}_demog.csv",
        data = f"{in_dir}/{dset_name}_{{dtype}}.csv"
    params:
        key_col = 'MRID'    
    output:
        f"{out_dir}/tmp_centiles/merged/{dset_name}_{{dtype}}_sample{{ctype}}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs_multi.py {output} {params} {input}"

def get_param(wildcards):
    # Logic to determine the parameter value based on wildcards
    return wildcards.roi

rule calc_centiles:
    input:
        f"{out_dir}/tmp_centiles/merged/{dset_name}_{{dtype}}_sample{{ctype}}.csv"
    output:
        f"{out_dir}/centiles/rois/{dset_name}_{{dtype}}_centiles{{ctype}}_roi{{roi}}.csv"
    params:
        target = get_param,
        centile_vals = centile_vals,
        bin_size = bin_size,
    shell:
        "bash ../../utils/centiles/util_calc_centiles.sh {input} {params} {output} "

def get_roi_centiles(wildcards):
    list_csv = expand(f"{out_dir}/centiles/rois/{dset_name}_{wildcards.dtype}_centiles{wildcards.ctype}_roi{{roi}}.csv", roi = roi_types)
    return list_csv

rule merge_centiles:
    input: 
        get_roi_centiles
    output:
        f"{out_dir}/centiles/{dset_name}_{{dtype}}_centiles{{ctype}}.csv"
    shell:
        "bash ../../utils/centiles/util_merge_centiles.sh {output} {input}"

rule rename_rois:
    input: 
        f"{out_dir}/centiles/{dset_name}_{{dtype}}_centiles{{ctype}}.csv",
        rois
    output:
        f"{out_dir}/centiles_renamed/{dset_name}_{{dtype}}_centiles{{ctype}}.csv"
    shell:
        "python ../../utils/centiles/util_rename_rois.py {input} {output}"

