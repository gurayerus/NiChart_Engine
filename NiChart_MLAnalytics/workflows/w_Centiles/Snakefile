## Import packages
import pandas as pd

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
localrules: copy_config, select_rois, merge_spare_to_rois, select_Centiles_sample, merge_data, combine_centiles

### Report data
#report: "report/workflow.rst"

## Config file
#configfile: "../../config/vTest/config_Centiles.yaml"
configfile: "../../config/vISTAG1/config_Centiles.yaml"

###################################
## Read config vars and lists

dir_input_covar = config["version"] + "/prep_data/out_data"
dir_input_data = config["version"] + "/COMBAT/out_data"
dir_input_spare = config["version"] + "/SPARE/out_data_all"
dir_output = config["version"] + "/Centiles"
rois = config["list_ROIs"]
spares = config["spare_types"]

df_tmp = pd.read_csv("../../config/" + rois)
LIST_ROIS = df_tmp['Code'].tolist()[1:]
LIST_SPARE = ['SPARE' + x for x in spares]
LIST_VAR = LIST_ROIS + LIST_SPARE

###################################
## Set out file names

OUT_CONFIG = expand("../../data/{dir_output}/config/{cname}", cname = [config["config_name"], config["list_ROIs"]], dir_output = dir_output)

OUT_RESULTS = expand("../../data/{dir_output}/final/combined_{dtype}_{ctype}.csv", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = dir_output)

OUT_FILES = OUT_CONFIG + OUT_RESULTS

OUT_FILES = ["../../data/vISTAG1/Centiles/merged_vars/combined_DLMUSE_raw_selrois+spare.csv"]

OUT_FILES = ["../../data/vISTAG1/Centiles/c_CN/data/combined_DLMUSE_raw_all.csv"]

OUT_FILES = ["../../data/vISTAG1/Centiles/c_CN/centiles_single/combined_DLMUSE_raw_varMUSE_701.csv"]

OUT_FILES = ["../../data/vISTAG1/Centiles/c_CN/centiles_combined/combined_DLMUSE_raw_centiles.csv"]

print("Target out files:" + '\n' + '\n'.join(OUT_FILES) + '\n')

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        "../../config/{cname}"
    output:
        f"../../data/{dir_output}/config/{{cname}}"
    shell:
        "cp -v {input} {output}"

rule select_rois:
    '''
    Select variables from data
    '''
    input:
        in_csv=f"../../data/{dir_input_data}/combined_{{dtype}}_{{ctype}}_COMBAT.csv", 
        dict_csv=expand("../../config/{rois}", rois = config["list_ROIs"])
    params:
        dict_var = 'Code',
        covars ='MRID',
    output:
        f"../../data/{dir_output}/merged_vars/combined_{{dtype}}_{{ctype}}_selrois.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_vars.py {input} {params} {output}"

rule merge_spare_to_rois:
    '''
    Select variables from data
    '''
    input:
        in_csv1=f"../../data/{dir_output}/merged_vars/combined_{{dtype}}_{{ctype}}_selrois.csv",
        in_csv2=f"../../data/{dir_input_spare}/combined_{{dtype}}_{{ctype}}_SPARE-ALL.csv", 
    output:
        "../../data/{dir_output}/merged_vars/combined_{dtype}_{ctype}_selrois+spare.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} MRID {output}"

def get_centiles_sample(wildcards):
    path_centiles='../../config/' + config["sample_Centiles_" + wildcards.ctype]
    return path_centiles

rule select_Centiles_sample:
    '''
    Select MRID and Age for the specific centile sample
    '''
    input:
        demog=f"../../data/{dir_input_covar}/combined_{{dtype}}_covars.csv",
        sample=get_centiles_sample,
    output:
        "../../data/{dir_output}/c_{ctype}/data/combined_{dtype}_covars.csv"
    params:
        in_vars = 'MRID,Age'
    shell:
        "python ../../utils/centiles/util_select_centile_sample.py {input} {params} {output}"    

rule merge_data:
    '''
    Merge data
    '''
    input:
        in_csv1=f"../../data/{dir_output}/c_{{centtype}}/data/combined_{{dtype}}_covars.csv",
        in_csv2=f"../../data/{dir_output}/merged_vars/combined_{{dtype}}_{{ctype}}_selrois+spare.csv"
    output:
        f"../../data/{dir_output}/c_{{centtype}}/data/combined_{{dtype}}_{{ctype}}_all.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} MRID {output}"
    
rule calc_centiles_single_var:
    input:
        f"../../data/{dir_output}/c_{{centtype}}/data/combined_{{dtype}}_{{ctype}}_all.csv"
    output:
        f"../../data/{dir_output}/c_{{centtype}}/centiles_single/combined_{{dtype}}_{{ctype}}_var{{cvar}}.csv"
    params:
        cent_vals='5,25,50,75,95',
        bin_size='1',
    shell:
        "bash ../../utils/centiles/util_calc_centiles_single.sh {input} {wildcards.cvar} {params} {output}"

def get_centile_files(wildcards):
    '''
    Returns a list of centile csv files for all rois for a specific study
    '''
    cent_files = expand(f"../../data/{dir_output}/c_{wildcards.centtype}/centiles_single/combined_{wildcards.dtype}_{wildcards.ctype}_var{{cvar}}.csv", cvar = LIST_VAR)
    return cent_files

rule combine_centiles:
    input:
        get_centile_files
    output:
        f"../../data/{dir_output}/c_{{centtype}}/centiles_combined/combined_{{dtype}}_{{ctype}}_centiles.csv"
    shell:
        "bash ../../utils/centiles/util_combine_centiles.sh {output} {input}"

###rule copy_centiles:
    ###input:
        ###"../../data/centiles/centiles-{csample}_combined.csv"
    ###output:
        ###protected("../../models/centiles/centiles-{csample}_combined.csv")
    ###shell:
        ###"bash ./utils/util_combine_centiles.sh {output} {input}"
