## Import packages
import pandas as pd
import os
import sys

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
##localrules: rename_muse_rois

## Report data
report: "report/workflow.rst"

## Config file
configfile: "../../config/config_COMBAT.yaml"

###################################
## Out file names

OUT_CONFIG = expand("../../data/{dir_output}/config/{cname}", cname = ["config_COMBAT.yaml", config["sample_COMBAT_train"], config["sample_COMBAT_test"], config["list_ROIs"]], dir_output = config["dir_output"])

OUT_RESULTS = expand("../../data/{dir_output}/data/combined_{dtype}_{ctype}.csv", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = config["dir_output"])

OUT_FILES = OUT_CONFIG + OUT_RESULTS
#OUT_FILES = ["../../data/COMBAT/COMBAT_vtest1/data/combined_MUSE_raw.csv"]
#OUT_FILES = ["../../data/COMBAT/COMBAT_vtest1/sel_vars/combined_MUSE_raw.csv"]

OUT_FILES=["../../data/COMBAT/COMBAT_vtest1/harmonized/combined_MUSE_raw_test_COMBATOut.csv"]

OUT_FILES=["../../models/COMBAT/COMBAT_vtest1/combined_MUSE_raw_COMBATModel.pkl.gz"]

print("Target out files:" + '\n' + '\n'.join(OUT_FILES))

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        "../../config/{cname}"
    output:
        expand("../../data/{dir_output}/config/{{cname}}", dir_output = config["dir_output"])
    shell:
        "cp -v {input} {output}"

rule select_vars:
    '''
    Select variables from data
    '''
    input:
        in_csv=expand("../../data/{dir_input}/combined/combined_{{dtype}}.csv", dir_input = config["dir_input"]), 
        dict_csv=expand("../../config/{rois}", rois = config["list_ROIs"])
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,SITE,DLICV',
    output:
        "../../data/{dir_output}/sel_vars/combined_{dtype}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"

rule select_COMBAT_sample_train:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv=expand("../../data/samples/COMBAT/{sample}", sample = config["sample_COMBAT_train"]),
        data_csv=expand("../../data/{dir_output}/sel_vars/combined_{{dtype}}.csv", dir_output = config["dir_output"]),
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/sel_sample/combined_{dtype}_train.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule select_COMBAT_sample_test:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv=expand("../../data/samples/COMBAT/{sample}", sample = config["sample_COMBAT_test"]),
        data_csv=expand("../../data/{dir_output}/sel_vars/combined_{{dtype}}.csv", dir_output = config["dir_output"]),
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/sel_sample/combined_{dtype}_test.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule COMBAT_train:
    '''
    Train COMBAT model
    '''    
    input:
        "../../data/{dir_output}/sel_sample/combined_{dtype}_train.csv"
    params:
        batch='SITE',
        vkey='MRID',
        vnum='DLICV',
        vcat='Sex',
        vspline='Age'
    output:
        mdl="../../data/{dir_output}/model/combined_{dtype}_COMBATModel.pkl.gz",
        csv="../../data/{dir_output}/model/combined_{dtype}_train_COMBATOut.csv"
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/util_combat_train.sh {input} {params} {output}"

rule COMBAT_apply:
    '''
    Apply COMBAT model to calculate harmonized values
    '''    
    input:
        data="../../data/{dir_output}/sel_sample/combined_{dtype}_test.csv",
        mdl="../../data/{dir_output}/model/combined_{dtype}_COMBATModel.pkl.gz"
    output:
        csv="../../data/{dir_output}/harmonized/combined_{dtype}_test_COMBATOut_init.csv"
    resources:
        mem_mb=16000
    shell:
        "echo neuroharm -a apply -i {input.data} -m {input.mdl} -u {output.csv};"
        "neuroharm -a apply -i {input.data} -m {input.mdl} -u {output.csv}"

rule remove_COMBAT_suffix:
    '''
    Remove COMBAT suffix (_HARM)
    FIXME: Ideally COMBAT should be run with an arg to create output var names without a suffix
    '''        
    input:
        "../../data/{dir_output}/harmonized/combined_{dtype}_test_COMBATOut_init.csv"
    params:
        rm_suff='_HARM'
    output:
        "../../data/{dir_output}/harmonized/combined_{dtype}_test_COMBATOut_nosuffix.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_remove_suffix.py {input} {params} {output}; "
        
rule select_output_vars:
    '''
    Select final variables from the harmonized data (MRID + ICV + ROI names)
    '''        
    input:
        in_csv="../../data/{dir_output}/harmonized/combined_{dtype}_test_COMBATOut_nosuffix.csv",
        dict=expand("../../config/{rois}", rois = config["list_ROIs"])
    params:
        dict_var = 'Code',
        covars='MRID,ICV'
    output:
        csv="../../data/{dir_output}/harmonized/combined_{dtype}_test_COMBATOut.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"


rule copy_COMBAT_model:
    '''
    Copy COMBAT model to models
    '''
    input:
        "../../data/{dir_output}/model/combined_{dtype}_COMBATModel.pkl.gz",
    output:
        "../../models/{dir_output}/combined_{dtype}_COMBATModel.pkl.gz"
    resources:
        mem_mb=8000
    shell:
        "cp {input} {output}"


