## Import packages
import pandas as pd
import os
import sys

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
localrules: copy_config, select_vars, select_SPARE_sample, rename_target_var, split_train_test, copy_SPARE_model, eval_SPARE_scores

## Config file
configfile: "../../config/config_vDemo_SPARE.yaml"

###################################
## Out file names

#OUT_CONFIG = expand("../../data/{dir_output}/config/{cname}", cname = ["config_SPARE.yaml", config["sample_SPARE_train"], config["sample_SPARE_test"], config["list_ROIs"]], dir_output = config["dir_output"])

#OUT_RESULTS = expand("../../data/{dir_output}/data/combined_{dtype}_{ctype}.csv", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = config["dir_output"])

#OUT_FILES = OUT_CONFIG + OUT_RESULTS

OUT_FILES=expand("../../data/{dir_output}/model/combined_{dtype}_{ctype}_SPARE-{stype}_model.pkl.gz", dtype = config["roi_types"], ctype = config["corr_types"], stype = config["spare_types"], dir_output = config["dir_output"])

OUT_FILES=expand("../../models/{dir_output}/combined_{dtype}_{ctype}_COMBAT_SPARE-{stype}_model.pkl.gz", dtype = config["roi_types"], ctype = config["corr_types"], stype = config["spare_types"], dir_output = config["dir_output"])

OUT_FILES=expand("../../data/{dir_output}/spare_scores/combined_{dtype}_{ctype}_COMBAT_SPARE-{stype}.csv", dtype = config["roi_types"], ctype = config["corr_types"], stype = config["spare_types"], dir_output = config["dir_output"])

OUT_FILES=expand("../../data/{dir_output}/spare_scores/combined_{dtype}_{ctype}_COMBAT_SPARE-{stype}_eval.csv", dtype = config["roi_types"], ctype = config["corr_types"], stype = config["spare_types"], dir_output = config["dir_output"])

print("Target out files:" + '\n' + '\n'.join(OUT_FILES))

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        "../../config/{cname}"
    output:
        expand("../../data/{dir_output}/config/{{cname}}", dir_output = config["dir_output"])
    shell:
        "cp -v {input} {output}"

rule select_vars:
    '''
    Select variables from data
    '''
    input:
        in_csv=expand("../../data/{dir_input}/combined_{{dtype}}.csv", dir_input = config["dir_input"]),
        dict_csv=expand("../../config/{rois}", rois = config["list_ROIs"])
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,DLICV',
    output:
        "../../data/{dir_output}/sel_vars/combined_{dtype}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"

def get_spare_sample(wildcards):
    path_spare='../../config/' + config["sample_SPARE_" + wildcards.stype]
    return path_spare

rule select_SPARE_sample:
    '''
    Select sample (using list)
    '''
    input:
        sample=get_spare_sample,
        data="../../data/{dir_output}/sel_vars/combined_{dtype}.csv",
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule rename_target_var:
    '''
    Rename the name of the second var to target
    '''
    input:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all.csv"
    params:
        num_col = '1',
        name_col = 'Target'
    output:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all_renamed.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_rename_column.py {input} {params} {output}"

rule split_train_test:
    '''
    Split spare sample all to train test
    '''
    input:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all_renamed.csv"
    params:
        strat_vars = 'Sex,Target',
        test_ratio = '0.4'
    output:
        "../../data/{dir_output}/train_test/{stype}/combined_{dtype}_train.csv",
        "../../data/{dir_output}/train_test/{stype}/combined_{dtype}_test.csv",
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_split_train_test.py {input} {params} {output}"

rule sparesvm_train:
    '''
    Train SPARE model
    '''
    input:
        "../../data/{dir_output}/train_test/{stype}/combined_{dtype}_train.csv"
    params:
        vkey='MRID',
        target = 'Target'
    output:
        "../../data/{dir_output}/model/combined_{dtype}_SPARE-{stype}_model.pkl.gz"
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/util_spare_train.sh {input} {params} {output}"
        
rule copy_SPARE_model:
    '''
    Copy SPARE model to models
    '''
    input:
        "../../data/{dir_output}/model/combined_{dtype}_SPARE-{stype}_model.pkl.gz"
    output:
        "../../models/{dir_output}/combined_{dtype}_SPARE-{stype}_model.pkl.gz"
    resources:
        mem_mb=8000
    shell:
        "cp {input} {output}"

rule sparesvm_test:
    '''
    Test SPARE model using the split test sample
    '''
    input:
        data="../../data/{dir_output}/train_test/{stype}/combined_{dtype}_test.csv",
        mdl="../../data/{dir_output}/model/combined_{dtype}_SPARE-{stype}_model.pkl.gz"
    output:
        "../../data/{dir_output}/spare_scores/combined_{dtype}_SPARE-{stype}.csv"
    resources:
        mem_mb=16000
    shell:
        "bash ../../utils/util_spare_test.sh {input} {output}"

rule eval_SPARE_scores:
    '''
    Evaluate accuracy on test sample
    '''
    input:
        data="../../data/{dir_output}/train_test/{stype}/combined_{dtype}_test.csv",
        pred="../../data/{dir_output}/spare_scores/combined_{dtype}_SPARE-{stype}.csv"
    output:
        "../../data/{dir_output}/spare_scores/combined_{dtype}_SPARE-{stype}_eval.csv",
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_eval_spare.py {input} {output}"

