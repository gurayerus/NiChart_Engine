## Import packages
import pandas as pd
import os
import sys

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
localrules: select_sample_spare, merge_rois, copy_model, split_train_test

## Config file
configfile: "../../config/config_SPARE.yaml"

###################################
## Out file names

OUT_CONFIG = expand("../../data/{dir_output}/config/{cname}", cname = ["config_SPARE.yaml", config["sample_SPARE_train"], config["sample_SPARE_test"], config["list_ROIs"]], dir_output = config["dir_output"])

OUT_RESULTS = expand("../../data/{dir_output}/data/combined_{dtype}_{ctype}.csv", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = config["dir_output"])

OUT_FILES = OUT_CONFIG + OUT_RESULTS
#OUT_FILES = ["../../data/SPARE/SPARE_vtest1/data/combined_MUSE_raw.csv"]
#OUT_FILES = ["../../data/SPARE/SPARE_vtest1/sel_vars/combined_MUSE_raw.csv"]

OUT_FILES=["../../data/SPARE/SPARE_vtest1/harmonized/combined_MUSE_raw_test_SPAREOut.csv"]

OUT_FILES=["../../data/SPARE/SPARE_vtest1/sel_sample/AD/combined_MUSE_raw_all_renamed.csv"]

OUT_FILES=["../../data/SPARE/SPARE_vtest1/split_sample/combined_MUSE_raw_train.csv"]


print("Target out files:" + '\n' + '\n'.join(OUT_FILES))

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        "../../config/{cname}"
    output:
        expand("../../data/{dir_output}/config/{{cname}}", dir_output = config["dir_output"])
    shell:
        "cp -v {input} {output}"

rule select_vars:
    '''
    Select variables from data
    '''
    input:
        in_csv=expand("../../data/{dir_input}/combined/combined_{{dtype}}.csv", dir_input = config["dir_input"]),
        dict_csv=expand("../../config/{rois}", rois = config["list_ROIs"])
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,DLICV',
    output:
        "../../data/{dir_output}/sel_vars/combined_{dtype}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"

rule select_SPARE_sample:
    '''
    Select sample (using list)
    '''
    input:
        sample_csv="../../data/samples/SPARE/sample_SPARE_{stype}_all.csv",
        data_csv="../../data/{dir_output}/sel_vars/combined_{dtype}.csv",
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule rename_target_var:
    '''
    Rename the name of the second var to target
    '''
    input:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all.csv"
    params:
        num_col = '1',
        name_col = 'Target'
    output:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all_renamed.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_rename_column.py {input} {params} {output}"

rule split_train_test:
    '''
    Split spare sample all to train test
    '''
    input:
        "../../data/{dir_output}/sel_sample/{stype}/combined_{dtype}_all_renamed.csv"
    params:
        strat_vars = 'Sex,Target',
        test_ratio = '0.4'
    output:
        "../../data/{dir_output}/split_sample/{stype}/combined_{dtype}_train.csv",
        "../../data/{dir_output}/split_sample/{stype}/combined_{dtype}_test.csv",
    resources:
        mem_mb=8000
    shell:
        "echo python utils/util_split_train_test.py {input} {params} {output}; "
        "python utils/util_split_train_test.py {input} {params} {output}"

rule sparesvm_train:
    '''
    Train SPARE model
    '''
    input:
        "../../data/SPARE/s{stype}/r{rtype}/data/NiChart_DLMUSE_{dtype}_train.csv"
    params:
        vkey='MRID',
    output:
        "../../data/SPARE/s{stype}/r{rtype}/models/NiChart_DLMUSE_{dtype}_model.pkl.gz"
    resources:
        mem_mb=16000
    shell:
        "echo spare_score -a train -i {input} -o {output} -kv {params.vkey} -t {wildcards.stype} "
        "-mt SVM -k linear -pg 1; "
        "spare_score -a train -i {input} -o {output} -kv {params.vkey} -t {wildcards.stype} "
        "-mt SVM -k linear -pg 1"
        
rule sparesvm_test:
    '''
    Test SPARE model using the split test sample
    '''
    input:
        data="../../data/SPARE/s{stype}/r{rtype}/data/NiChart_DLMUSE_{dtype}_test.csv",
        mdl="../../data/SPARE/s{stype}/r{rtype}/models/NiChart_DLMUSE_{dtype}_model.pkl.gz"
    output:
        csv="../../data/SPARE/s{stype}/r{rtype}/pred/NiChart_DLMUSE_{dtype}_pred.csv"
    resources:
        mem_mb=16000
    shell:
        "echo spare_score -a test -i {input.data} -m {input.mdl} -o {output.csv}; "
        "spare_score -a test -i {input.data} -m {input.mdl} -o {output.csv}"

rule sparesvm_eval:
    '''
    Evaluate accuracy on test sample
    '''
    input:
        data="../../data/SPARE/s{stype}/r{rtype}/data/NiChart_DLMUSE_{dtype}_test.csv",
        pred="../../data/SPARE/s{stype}/r{rtype}/pred/NiChart_DLMUSE_{dtype}_pred.csv"
    output:
        csv="../../data/SPARE/s{stype}/r{rtype}/pred/NiChart_DLMUSE_{dtype}_eval.csv"
    resources:
        mem_mb=8000
    shell:
        "echo python utils/util_eval_spare.py {input} {wildcards.stype} {output}; "
        "python utils/util_eval_spare.py {input} {wildcards.stype} {output}"

#rule copy_model:
    #'''
    #Copy model to models folder
    #'''
    #input:
        #"../../data/SPARE/s_{stype}/models/NiChart_DLMUSE_{dtype}_model.pkl.gz"
    #output:
        #"../../models/SPARE/SPARE_{stype}_NiChart_DLMUSE_{dtype}_model.pkl.gz"
    #shell:
        #"cp {input} {output}"
        
#rule copy_spare_scores:
    #'''
    #Copy model to models folder
    #'''
    #input:
        #"../../data/SPARE/s_{stype}/models/NiChart_DLMUSE_{dtype}_model.pkl.gz"
    #output:
        #"../../models/SPARE/SPARE_{stype}_NiChart_DLMUSE_{dtype}_model.pkl.gz"
    #shell:
        #"cp {input} {output}"

